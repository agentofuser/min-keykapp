(
    quote
    string

    dup
    length
    2
    -

    1
    swap
    substr
)
(serialize)
lambda


(
    serialize

    quote
    "> $1\n"
    swap
    interpolate
)
(stack-item-format)
lambda


(
    get-stack
    (
        stack-item-format
        print!
    )
    foreach
)
(stack-print!)
lambda


(
    "\n[----\nstack:\n"
    print!

    stack-print!

    "\n]----\n\n"
    print!

    "[$1]\nÎ» "
    (.)
    apply
    interpolate
)
(stack-prompt)
lambda


(stack-prompt)
(prompt)
lambda


(
   (HOME)
   get-env
)
(homedir)
lambda


(
    (
       homedir
       ".minrc"
    )
    apply
   join-path
)
dequote
(minrc-path)
define


(
    "\n"
    suffix
    print!
)
(println!)
lambda


; FIXME: Works if typed unquoted on repl but not as a lambda.
;        Maybe because eval is scoped to empty substack instead of the
;        globally-scoped stack? So the ROOT namespace isn't updated
;        by symbols getting redefined when minrc gets eval'ed again?
;        Might be also the fact that `lambda` and `define` only work
;        the first time but for redefining symbols one has to use
;        `lambda-bind` and `bind`, respectively?
(
   minrc-path
   fread
   eval

   "INFO: minrc reloaded"
   println!
)
(minrc-reload)
lambda

; import all stored symbols from ~/.min_symbols
homedir
".min_symbols"
()
prepend
prepend
join-path
fread
from-json
(min-symbols)
define
(min-symbols)
import