1
"hello, worlds!"
1
2
3
"4"
1
2
"3"
1
.
"startup.min"
"/"
join
pop
get-stack
"/"
join
fread
eval
(. "startup.min") apply
"/"
join
fread
eval
.
"startup.min"
get-stack
"/"
join
fread
eval
pop
pop
(HOME)
get-env
"/"
suffix
".minrc"
suffix
fread
eval
1
2
3
()
append
append
append
pop
1
2
3
()
prepend
prepend
prepend
lambda
minrc-reload
((HOME) get-env ".minrc")
dequote
()
prepend
prepend
join-path
fread
eval
"haha" (foo) define
foo
minrc-reload
minrc-reload
minrc-path
minrc-path
minrc-path
minrc-reload
minrc-path
minrc-reload
pop
"foobar"
"\n"
suffix
print!
minrc-reload
minrc-reload
minrc-reload
minrc-reload
minrc-path
fread
eval
minrc-reload

exit
0 exit
0 exit
0 e
0 exit
0 exit
0 exit
2
print
print!
(+) (add) lambda
1
2
add
2
add!
add
(+) (add!) lambda
1
2
add!
1
2
1
w
homedir
minrc-path
pop
homedir
homedir
".min_symbols"
()
prepend
prepend
join-path
fread
from-json
(keykapp) define
keykapp
import
pop
(keykapp)
import
kkh
(suffix) (ja) lambda
kkh
(homedir ".minrc") apply
minrc-path
homedir
".min_symbols"
()
prepend
prepend
join-path
fread
from-json
(keykapp)
define
(keykapp)
import
kkh
(suffix) (ja) lambda
kkh
min-serialized-symbol-prefix
min-symbols
pop
pop
kkh
keykapp-max-ngram-length
range-from-one
(1 10) range
pop
pop
8
(_last)
define
(1 _last)
apply
range
8
range-from-one
pop
8
range-to-one
hd
hd
keykapp-data-dir
1
to-str
serialize
clear-stack
1
2
cs
"$1"
swap
interpolate
clear-stack
1
"$1"
swap
quote
interpolate
1
to-str
()
to-str
()
serialize
(serialize)
serializel
serialize
parse
dequote
to-str
